var hasRTC=window.RTCPeerConnection||window.mozRTCPeerConnection||window.webkitRTCPeerConnection;hasRTC=false&&hasRTC&&duration<=600;if(hasRTC){var MAX_TIMEOUT_COUNT=3;var timeoutLeechers={};var myBase={};var myBaseUrl={};var coreCache={};var statP2P={p2p:0,cdn:0,leechers:0,seeders:0,requests:0};var errorCount=0;var getLeechersCallbacks={};var lastSuccessLeecher;var connectingLeecher;Peer.prototype._storeMessage=function(connectionId,message){if(message.type=='RES_SEND'){var callback=getLeechersCallbacks[connectionId];delete getLeechersCallbacks[connectionId];if(!callback){return;}
var url=connectionId;errorCount=0;var leechers=Object.keys(message.payload.data);for(var i=0;i<leechers.length;i++){if(leechers[i]==videojs.APIP2P.peer.id){leechers.splice(i,1);i--;}else{myBaseUrl[url][leechers[i]]=1;}}
callback(leechers);}};if(!ArrayBuffer.prototype.slice){ArrayBuffer.prototype.slice=function(start,end){var that=new Uint8Array(this);if(end==undefined)end=that.length;var result=new ArrayBuffer(end-start);var resultArray=new Uint8Array(result);for(var i=0;i<resultArray.length;i++){resultArray[i]=that[i+start];}
return result;};}
(function(videojs){videojs.APIP2P={};videojs.APIP2P.startConnect=function(options){var self=this;var peer=new Peer(options);videojs.APIP2P.options=options;videojs.APIP2P.peer=peer;peer.on('connection',function(conn){myBase[conn.peer]=conn;videojs.APIP2P.initializing(conn,null);});peer.on('error',function(error){if(error.type==='peer-unavailable'){var id=error.message.substring('Could not connect to peer '.length);videojs.APIP2P.cleanbase(id);var obj={response:null};var ca=self.callbacks[id];if(ca){statP2P.leechers--;ca.callback.call(obj,obj,'error no peer',ca.message.url);delete self.callbacks[id];}else{}}});};videojs.APIP2P.callbacks={};videojs.APIP2P.cleanbase=function(id){if(myBase[id]){delete myBase[id];}
var keys=Object.keys(myBaseUrl);for(var i=0;i<keys.length;i++){var url=keys[i];if(myBaseUrl[url][id]){delete myBaseUrl[url][id];}}};videojs.APIP2P.sendMyBase=function(conn){var base={};var keys=Object.keys(myBaseUrl);for(var i=0;i<keys.length;i++){var url=keys[i];base[url]=Object.keys(myBaseUrl[url]);}
conn.send({type:'ABASE',data:base,id:videojs.APIP2P.peer.id});};videojs.APIP2P.initializing=function(conn,leacher){if(!conn){return;}
var self=this;var cleanfct=function(conn){videojs.APIP2P.cleanbase(conn.peer);var obj={response:null};var ca=self.callbacks[conn.peer];if(ca){ca.callback.call(obj,'error',ca.message.url);delete self.callbacks[conn.peer];}};conn.on('error',function(error){cleanfct(conn);});conn.on('disconnected',function(error){cleanfct(conn);});conn.on('close',function(error){cleanfct(conn);});conn.on('open',function(){videojs.APIP2P.sendMyBase(conn);conn.on('data',function(data){if(data.type=='DATA'){var obj={response:data.data};var ca=self.callbacks[conn.peer];if(data.data){lastSuccessLeecher=conn.peer;videojs.APIP2P.imLeecher(data.url,videojs.APIP2P.peer.id,data.data);}
if(!ca){return;}
ca.callback.call(obj,obj,data.data==null,ca.message.url);delete self.callbacks[conn.peer];}
if(data.type=='ASK'){var buf=coreCache[data.url];if(buf&&buf.byteLength){console.log('P2PTX',data.url);conn.send({type:'DATA',data:buf,url:data.url});}else{conn.send({type:'DATA',url:data.url});}}
var all;if(data.type=='UBASE'){all=data.data;if(!myBaseUrl[data.url]){myBaseUrl[data.url]={};}
myBaseUrl[data.url][data.id]=conn;}
if(data.type=='ABASE'){all=data.data;var keys=Object.keys(all);for(var i=0;i<keys.length;i++){var u=keys[i];if(!myBaseUrl[u]){myBaseUrl[u]=[];}
for(var j=0;j<all[u].length;j++){var l=all[u][j];if(l==videojs.APIP2P.peer.id){continue;}
if(!myBaseUrl[u][l]){myBaseUrl[u][l]=myBase[l]||1;}}}}});if(self.callbacks[conn.peer]){conn.send(self.callbacks[conn.peer].message);}});};videojs.APIP2P.xhrP2P=function(leechers,url,callback){var selectIndex=-1;if(lastSuccessLeecher){for(var j=0;j<leechers.length;j++){if(leechers[j]===lastSuccessLeecher){selectIndex=j;break;}}}
if(selectIndex===-1){selectIndex=Math.floor(Math.random()*leechers.length);}
var error=false;for(var i=0;i<leechers.length;i++){var leecher=leechers[i];var conn;if(!myBase[leecher]){conn=this.peer.connect(leecher);if(!conn){if(i===selectIndex){error=true;}
continue;}
myBase[leecher]=conn;myBaseUrl[url][leecher]=conn;if(i==selectIndex){connectingLeecher=leecher;this.callbacks[leecher]={callback:callback,message:{type:'ASK',url:url}};}
this.initializing(conn,leecher);}else if(i==selectIndex){conn=myBase[leecher];connectingLeecher=leecher;this.callbacks[leecher]={callback:callback,message:{type:'ASK',url:url}};conn.send(this.callbacks[leecher].message);}}
if(error){callback.call({response:null},'error',url);}};videojs.APIP2P.updateLeechers=function(url,callback){if(!videojs.APIP2P.peer.socket._wsOpen()){return callback([]);}
getLeechersCallbacks[url]=callback;videojs.APIP2P.peer.socket.send({'type':'GET_LEECHERS','key':videojs.APIP2P.options.key,'url':url});};videojs.APIP2P.imLeecher=function(url,id,data){if(errorCount>=10){return;}
if(!data.byteLength){return;}
if(!videojs.APIP2P.peer.socket._wsOpen()){return;}
data=data.slice(0);coreCache[url]=data;videojs.APIP2P.peer.socket.send({'type':'ANNOUNCE_LEECHER_SELF','key':videojs.APIP2P.options.key,'url':url,'leecher':id});var keys=Object.keys(myBase);for(var i=0;i<keys.length;i++){var l=keys[i];if(myBase[l]){myBase[l].send({type:'UBASE',url:url,id:videojs.APIP2P.peer.id});}}};})(window.videojs);(function(videojs){videojs.Hls.xhr=function XhrFunction(options,callback){options=videojs.mergeOptions({timeout:45e3},options);var beforeRequest=XhrFunction.beforeRequest||videojs.Hls.xhr.beforeRequest;if(beforeRequest&&typeof beforeRequest==='function'){var newOptions=beforeRequest(options);if(newOptions){options=newOptions;}}
var ret={abort:function(){console.log('========================================================================');},addEventListener:function(evt,callback){}};if(options.uri.endsWith('.m3u8')||errorCount>=10){return videojs.Hls.xhrCDN(options,ret,callback);}
try{var url=options.uri;if(!myBaseUrl[url]){myBaseUrl[url]={};}
var keys=Object.keys(myBaseUrl[url]);if(keys.length>0){videojs.Hls.xhrP2P(keys,options,ret,callback);videojs.APIP2P.updateLeechers(url,function(leechers){});return ret;}
if(typeof callback!=='function'){callback=function(){};}
var timeOut=false;var fallback=setTimeout(function(){console.log('P2P updateLeechers Timeout!');timeOut=true;errorCount++;videojs.Hls.xhrCDN(options,ret,callback);},3000);videojs.APIP2P.updateLeechers(url,function(leechers){if(timeOut){return;}
clearTimeout(fallback);if(leechers.length){videojs.Hls.xhrP2P(leechers,options,ret,callback);}else{videojs.Hls.xhrCDN(options,ret,callback);}});}catch(e){console.log(e);}
return ret;};videojs.Hls.xhrP2P=function(leechers,options,ret,callback){leechers=leechers.filter(function(leecher){return!timeoutLeechers[leecher]||timeoutLeechers[leecher]<MAX_TIMEOUT_COUNT;});if(leechers.length===0){console.log('No healthy leecher available');return videojs.Hls.xhrCDN(options,ret,callback);}
var sender={requestTime:new Date().getTime()};var timeOut=false;var fallback=setTimeout(function(){console.log('P2P xhrP2P Timeout!',connectingLeecher);if(!timeoutLeechers[connectingLeecher]){timeoutLeechers[connectingLeecher]=1;}else{timeoutLeechers[connectingLeecher]++;}
console.log(timeoutLeechers);if(lastSuccessLeecher&&connectingLeecher===lastSuccessLeecher){console.log('connectingLeecher === lastSuccessLeecher');lastSuccessLeecher=null;}
timeOut=true;videojs.Hls.xhrCDN(options,ret,callback);},2000);videojs.APIP2P.xhrP2P(leechers,options.uri,function(obj,error,urlCB){if(timeOut){return;}
clearTimeout(fallback);if(error){return videojs.Hls.xhrCDN(options,ret,callback);}
console.log('P2PRX',options.uri);if(!timeoutLeechers[connectingLeecher]){timeoutLeechers[connectingLeecher]=0;}else{timeoutLeechers[connectingLeecher]--;}
sender.responseTime=new Date().getTime();sender=videojs.mergeOptions(sender,{roundTripTime:sender.responseTime-sender.requestTime,bytesReceived:obj.response.byteLength||obj.response.length,status:200});sender.bandwidth=Math.floor((sender.bytesReceived/sender.roundTripTime)*8*1000);sender.responseType='arraybuffer';sender=videojs.mergeOptions(sender,obj);statP2P.p2p+=sender.bytesReceived;for(var key in sender){try{ret[key]=sender[key];}catch(e){}}
callback(null,ret);});};videojs.Hls.xhrCDN=function(options,ret,callback){var finished=false;var request=videojs.xhr(options,function(error,response){var reqResponse=request.response;if(!error&&reqResponse){request.responseTime=Date.now();request.roundTripTime=request.responseTime-request.requestTime;request.bytesReceived=reqResponse.byteLength||reqResponse.length;if(!request.bandwidth){request.bandwidth=Math.floor((request.bytesReceived/request.roundTripTime)*8*1000);}
statP2P.cdn+=request.bytesReceived;videojs.APIP2P.imLeecher(options.uri,videojs.APIP2P.peer.id,reqResponse);}
if(error&&error.code==='ETIMEDOUT'){request.timedout=true;}
if(!error&&!request.aborted&&response.statusCode!==200&&response.statusCode!==206&&response.statusCode!==0){error=new Error('XHR Failed with a response of: '+
(request&&(reqResponse||request.responseText)));}
for(var key in request){if(key!=='addEventListener'){try{ret[key]=request[key];}catch(e){}}}
finished=true;if(!error){callback(error,ret);}else{setTimeout(function(){if(!request.aborted){videojs.Hls.xhrCDN(options,ret,callback);}},200);}});const originalAbort=request.abort;request.abort=function(){request.aborted=true;return originalAbort.apply(request,arguments);};request.uri=options.uri;request.requestTime=Date.now();var monitor=function(condFn,ms){setTimeout(function(){if(!condFn())return;console.log('Call again internally!',options,request,request.readyState);request.abort();videojs.Hls.xhrCDN(options,ret,callback);},ms);};monitor(function(){if(!finished&&request.readyState===4){console.log('WTF?');return true;}
console.log(finished,request.aborted,request.readyState);return(!finished&&!request.aborted&&request.readyState<=2);},4000);monitor(function(){if(!finished&&request.readyState===4){console.log('WTF?');return true;}
return(!finished&&!request.aborted&&request.readyState===3);},24000);for(var key in request){if(key!=='addEventListener'){try{ret[key]=request[key];}catch(e){}}}
return ret;};})(window.videojs);window.p2p=function(options){if(window.videojs&&window.videojs.Hls){var baseopt={host:'127.0.0.1',port:'9000',secure:false,key:'peerjs',debug:0};baseopt=window.videojs.mergeOptions(baseopt,options);window.videojs.APIP2P.startConnect(baseopt);}};}